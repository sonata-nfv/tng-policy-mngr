package rules.gsgpilotTranscodingService

import eu.tng.policymanager.facts.*
import eu.tng.policymanager.facts.action.*
import eu.tng.policymanager.facts.enums.*

declare  MonitoredComponent 
    @expires( 2m )
    @role( event )

end

declare  LogMetric 
    @expires( 5s )
    @role( event )

end

declare  ElasticityAction 
    @expires( 5s )
    @role( event )

end



rule "scaleOutAlert"
when
 $m1 := LogMetric(vnf_name=="vnf1" && value== "mon_rule_vm_cpu_perc" ) from entry-point "MonitoringStream" 
then
    insertLogical( new ElasticityAction("s438920483","squid-vnf",ScalingType.addvnf,"1",$m1.getVnfd_id(),$m1.getVim_id(),Status.not_send));
    System.out.println("insert test elasticity action");
end




rule "scaleOutAlertOld"
when
    $m0 := MonitoredComponent( name== "squid-vnf" && metric== "cpu_util" ) from entry-point "MonitoringStream" 
then
     insertLogical( new ElasticityAction($m0.getNsrid(),"squid-vnf",ScalingType.addvnf,"1",Status.not_send));
     System.out.println("insert test elasticity action");
end


rule "highTranscodingRateRule"
when
    (
    $tot0 := java.lang.Double( $tot0 >=70 ) from accumulate(     
    $m0 := MonitoredComponent( name== "vnf1" && metric== "CPULoad" ) over window:time(10m)from entry-point "MonitoringStream" ,
        average( $m0.getValue() )  ) and
    $tot1 := java.lang.Double( $tot1 <=8 ) from accumulate(     
    $m1 := MonitoredComponent( name== "vnf2" && metric== "RAM" ) over window:time(10m)from entry-point "MonitoringStream" ,
        average( $m1.getValue() )  ) ) 
then
    insertLogical( new ComponentResourceAllocationAction("pilotTranscodingService","vnf1",InfrastructureType.ApplyFlavour,"3",Status.not_send));
end


rule "lowTranscodingRateRule"
when
    (
    $tot0 := java.lang.Double( $tot0 < 3000 ) from accumulate(     
    $m0 := MonitoredComponent( name== "VirtualLinkA" && metric== "EndToEndDelay" ) over window:time(10m)from entry-point "MonitoringStream" ,
        average( $m0.getValue() )  ) and 
    $tot3 := java.lang.Double( $tot3 > 60 ) from accumulate(     
    $m3 := MonitoredComponent( name== "vnf1" && metric== "CPULoad" ) over window:time(10m)from entry-point "MonitoringStream" ,
        average( $m3.getValue() )  ) and
    $tot1 := java.lang.Double( $tot1 == 8 ) from accumulate(     
    $m1 := MonitoredComponent( name== "vnf2" && metric== "RAM" ) over window:time(10m)from entry-point "MonitoringStream" ,
        average( $m1.getValue() )  ) 
   ) 
then
    insertLogical( new NetworkManagementAction("pilotTranscodingService","VirtualLinkA",NetworkMechanismType.ProvideDedicatedBandwidth,"200")); 
    //insertLogical( new Action("pilotTranscodingService","vnf1",RuleActionType.LifecycleManagement,"200","restart")); 
    //insertLogical( new Action("pilotTranscodingService","vnf1",RuleActionType.Profile,"Green","setProfile")); 

end

rule "ElasticityRuleHelperTest"
when
   
 $m1 := MonitoredComponent(vnfd_id !=null) from entry-point "MonitoringStream" 
 $m2 := ElasticityAction (vnf_name==$m1.name)
 then
 $m2.setVnfd_id($m1.getVnfd_id());
 $m2.setVim_id($m1.getVim_id());
 update($m2);
 System.out.println("enrich elasticity action");
end

